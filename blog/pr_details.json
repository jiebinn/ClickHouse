{
  "82697": {
    "title": "Add alignment in the Counter of ProfileEvents to reduce false sharing",
    "body": "This patch will add alignment in the Counter of ProfileEvents to reduce false sharing in ProfileEvents.\r\n\r\nOriginal Clickbench Q3 cycle hotspot (2x240 vCPUs)\r\n\r\n![image](https://github.com/user-attachments/assets/a19030e9-f124-4a5b-85ec-4c4ed0595a0b)\r\n![image](https://github.com/user-attachments/assets/39f82e1b-8815-4db0-addd-629f9f2dd022)\r\n\r\nClickbench Q3 cycle hotspot with this patch (2x240 vCPUs)\r\n![image](https://github.com/user-attachments/assets/e428fe1f-ec71-4c83-8b41-dea53e50481d)\r\nThe hotspot `ProfileEvents::increment` has reduced from 36.6% to 8.5%.\r\n\r\nClickbench Q3 Core scaling figure (QPS & vCPUs). The patch will improve the performance when the vCPUs larger than 100. Overall, there is 20% ~ 40% performance gain if the vCPUs number is between 100 ~ 480.\r\n\r\n![image](https://github.com/user-attachments/assets/28fee3c6-8499-4a15-ad93-d688d74a46fb)\r\n\r\n\r\nTest the patch with ClickBench Q3 on 2 x 240 vCPUs system. QPS has got 27.4% performance imrpovement and the geometric mean of 43 queries has got 4.4% gain.\r\n\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nAdd alignment in the Counter of ProfileEvents to reduce false sharing.\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/82697.diff",
    "commits": 6,
    "additions": 5,
    "deletions": 1
  },
  "80247": {
    "title": "Reduce lock contention in QueryConditionCache",
    "body": "**Key Findings:**\r\nWith the previous bottleneck high page faults resolved in jemalloc (#80245), we have identified a 76% hotspot in performance cycles `native_queued_spin_lock_slowpath` from `QueryConditionCache::write` in the latest build on the 2 x 240 vCPUs system. And we have discovered the absence of checks for `mark_ranges` and `has_final_mark`, causing all threads to attempt locking `entry->mutex` unnecessarily.\r\n\r\n**Solution:**\r\nIntroduced a new method to QueryConditionCache to determine if cached query conditions need updating based on changes to underlying data or configuration.\r\nThis method avoids unnecessary cache rebuilds, ensuring data consistency and reducing lock contention, thereby improving concurrency in multi-threaded query environments.\r\n\r\n**Performance improvements:**\r\n- Reduces the `native_queued_spin_lock_slowpath` hotspot of entry->mutex from 76% to 1% with Clickbench Q10 on a 2 x 240 vCPUs system\r\n- Increases QPS for Q10 and Q11 by 85% and 89% respectively\r\n- Improves overall performance across 43 queries with a geometric mean gain of 8.1%\r\n\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nAvoid unnecessary update and reduce lock contention in QueryConditionCache\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/80247.diff",
    "commits": 2,
    "additions": 27,
    "deletions": 4
  },
  "72375": {
    "title": "Optimize the mutex with shared_mutex in the memory tracker",
    "body": "The mutex lock `overcommit_m` has protected the global variables while read and write in the OvercommitTracker of MemoryTracker. But it will cause lots of `native_queued_spin_lock_slowpath` in ClickBench Q8, Q42 and other queries on high core count system. Most of time it will only read, but not update. The patch will replace the mutex lock with read/write lock to reduce lock contention.\r\n\r\nTest the patch with clickbench on 256 x 2 vCPUs system. Overall geomean has got 6.8% performance gain. Q8, 24, Q26 and Q42 have got 77%, 19.5%, 19.5% and 11.4%  performance gain. No regression has been observed.\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nOptimize locking with shared locks in the memory tracker to reduce lock contention.\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n#### CI Settings (Only check the boxes if you know what you are doing):\r\n- [ ] <!---ci_set_required--> Allow: All Required Checks\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_set_builds--> Allow: All Builds\r\n- [ ] <!---batch_0_1--> Allow: batch 1, 2 for multi-batch jobs\r\n- [ ] <!---batch_2_3--> Allow: batch 3, 4, 5, 6 for multi-batch jobs\r\n---\r\n- [ ] <!---ci_exclude_style--> Exclude: Style check\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan|msan|ubsan|coverage--> Exclude: All with TSAN, MSAN, UBSAN, Coverage\r\n- [ ] <!---ci_exclude_aarch64|release|debug--> Exclude: All with aarch64, release, debug\r\n---\r\n- [ ] <!---ci_include_fuzzer--> Run only fuzzers related jobs (libFuzzer fuzzers, AST fuzzers, etc.)\r\n- [ ] <!---ci_exclude_ast--> Exclude: AST fuzzers\r\n---\r\n- [ ] <!---do_not_test--> Do not test\r\n- [ ] <!---woolen_wolfdog--> Woolen Wolfdog\r\n- [ ] <!---upload_all--> Upload binaries for special builds\r\n- [ ] <!---no_merge_commit--> Disable merge-commit\r\n- [ ] <!---no_ci_cache--> Disable CI cache\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/72375.diff",
    "commits": 9,
    "additions": 17,
    "deletions": 4
  },
  "70111": {
    "title": "Change the default threshold to enable hyper threading",
    "body": "Based on the testing data from https://github.com/ClickHouse/ClickHouse/pull/69548, we will change the default threshold to enable hyper threading.\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Not for changelog (changelog entry is not required)\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nChange the default threshold to enable hyper threading.\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n#### CI Settings (Only check the boxes if you know what you are doing):\r\n- [ ] <!---ci_set_required--> Allow: All Required Checks\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_set_builds--> Allow: All Builds\r\n- [ ] <!---batch_0_1--> Allow: batch 1, 2 for multi-batch jobs\r\n- [ ] <!---batch_2_3--> Allow: batch 3, 4, 5, 6 for multi-batch jobs\r\n---\r\n- [ ] <!---ci_exclude_style--> Exclude: Style check\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan|msan|ubsan|coverage--> Exclude: All with TSAN, MSAN, UBSAN, Coverage\r\n- [ ] <!---ci_exclude_aarch64|release|debug--> Exclude: All with aarch64, release, debug\r\n---\r\n- [ ] <!---ci_include_fuzzer--> Run only fuzzers related jobs (libFuzzer fuzzers, AST fuzzers, etc.)\r\n- [ ] <!---ci_exclude_ast--> Exclude: AST fuzzers\r\n---\r\n- [ ] <!---do_not_test--> Do not test\r\n- [ ] <!---woolen_wolfdog--> Woolen Wolfdog\r\n- [ ] <!---upload_all--> Upload binaries for special builds\r\n- [ ] <!---no_merge_commit--> Disable merge-commit\r\n- [ ] <!---no_ci_cache--> Disable CI cache\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/70111.diff",
    "commits": 1,
    "additions": 1,
    "deletions": 1
  },
  "69548": {
    "title": "Increase the threshold of smt/none_smt to improve the performance",
    "body": "Current threshold of smt/none_smt is 32. I have tuned the performance with Clickbench on 80x2 vCPUs system. If the total vCPUs is larger than 64, the performance would be better without smt. The patch means that while the vCPUs of system is between 32 and 64, we may still use smt to improve the performance.\r\n\r\n![image](https://github.com/user-attachments/assets/dc70e263-7549-4b05-b2e5-0a0aa9ec27b1)\r\n\r\n\r\n<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\">\r\n\r\n<head>\r\n\r\n<meta name=ProgId content=Excel.Sheet>\r\n<meta name=Generator content=\"Microsoft Excel 15\">\r\n<link id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/jiebinsu/AppData/Local/Temp/msohtmlclip1/01/clip.htm\">\r\n<link rel=File-List\r\nhref=\"file:///C:/Users/jiebinsu/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\">\r\n<style>\r\n<!--table\r\n\t{mso-displayed-decimal-separator:\"\\.\";\r\n\tmso-displayed-thousand-separator:\"\\,\";}\r\n@page\r\n\t{margin:.75in .7in .75in .7in;\r\n\tmso-header-margin:.3in;\r\n\tmso-footer-margin:.3in;}\r\ntr\r\n\t{mso-height-source:auto;}\r\ncol\r\n\t{mso-width-source:auto;}\r\nbr\r\n\t{mso-data-placement:same-cell;}\r\ntd\r\n\t{padding-top:1px;\r\n\tpadding-right:1px;\r\n\tpadding-left:1px;\r\n\tmso-ignore:padding;\r\n\tcolor:black;\r\n\tfont-size:11.0pt;\r\n\tfont-weight:400;\r\n\tfont-style:normal;\r\n\ttext-decoration:none;\r\n\tfont-family:Calibri, sans-serif;\r\n\tmso-font-charset:0;\r\n\tmso-number-format:General;\r\n\ttext-align:general;\r\n\tvertical-align:bottom;\r\n\tborder:none;\r\n\tmso-background-source:auto;\r\n\tmso-pattern:auto;\r\n\tmso-protection:locked visible;\r\n\twhite-space:nowrap;\r\n\tmso-rotate:0;}\r\n.xl65\r\n\t{border:.5pt solid windowtext;}\r\n.xl66\r\n\t{mso-number-format:\"0\\.0%\";\r\n\tborder:.5pt solid windowtext;}\r\n.xl67\r\n\t{mso-number-format:Fixed;\r\n\tborder:.5pt solid windowtext;}\r\n.xl68\r\n\t{text-align:center;\r\n\tborder:.5pt solid windowtext;}\r\n-->\r\n</style>\r\n</head>\r\n\r\n<body link=\"#0563C1\" vlink=\"#954F72\">\r\n\r\n\r\n  | Geomean of Clickbench |  \r\n-- | -- | --\r\nnumber of vCPUs | use_vCPUs | use_physical_cores | use_physical_cores/use_vCPUs\r\n16 | 5.79 | 4.71 | 81.3%\r\n32 | 8.38 | 7.40 | 88.3%\r\n48 | 9.48 | 8.81 | 93.0%\r\n64 | 9.93 | 9.76 | 98.2%\r\n80 | 9.63 | 10.25 | 106.3%\r\n96 | 10.13 | 10.92 | 107.9%\r\n112 | 10.28 | 11.59 | 112.7%\r\n128 | 10.46 | 12.00 | 114.7%\r\n144 | 10.42 | 12.09 | 116.0%\r\n160 | 10.60 | 11.93 | 112.5%\r\n\r\n\r\n\r\n</body>\r\n\r\n</html>\r\n\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nIncrease the threshold of smt/none_smt to improve the performance\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n#### CI Settings (Only check the boxes if you know what you are doing):\r\n- [ ] <!---ci_set_required--> Allow: All Required Checks\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_set_builds--> Allow: All Builds\r\n- [ ] <!---batch_0_1--> Allow: batch 1, 2 for multi-batch jobs\r\n- [ ] <!---batch_2_3--> Allow: batch 3, 4, 5, 6 for multi-batch jobs\r\n---\r\n- [ ] <!---ci_exclude_style--> Exclude: Style check\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan|msan|ubsan|coverage--> Exclude: All with TSAN, MSAN, UBSAN, Coverage\r\n- [ ] <!---ci_exclude_aarch64|release|debug--> Exclude: All with aarch64, release, debug\r\n---\r\n- [ ] <!---ci_include_fuzzer--> Run only fuzzers related jobs (libFuzzer fuzzers, AST fuzzers, etc.)\r\n- [ ] <!---ci_exclude_ast--> Exclude: AST fuzzers\r\n---\r\n- [ ] <!---do_not_test--> Do not test\r\n- [ ] <!---woolen_wolfdog--> Woolen Wolfdog\r\n- [ ] <!---upload_all--> Upload binaries for special builds\r\n- [ ] <!---no_merge_commit--> Disable merge-commit\r\n- [ ] <!---no_ci_cache--> Disable CI cache\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/69548.diff",
    "commits": 9,
    "additions": 13,
    "deletions": 3
  },
  "69547": {
    "title": "Tune the value of `min_marks_for_concurrent_read` to get better performance",
    "body": "Tune the value of `min_marks_for_concurrent_read` on 80x2 vCPUs system. The default value is 24 and we have found if switch to 16. The overall geomean of Clickbench has got 4.3% performance gain. More than 10 queries have got 10% performance gain. For example, Q20 has got 12.6% performance more. By collecting the performance counters, the CPU utilization of Q20 has got 15% more with the patch, which would contribute to the QPS gain. Then there will be less idle CPU. From the pipeline figures, the pipeline of Q20 would be more compact.\r\n\r\nAfter the patch\r\n![image](https://github.com/user-attachments/assets/5210df50-63fd-4a79-87e0-63b4dbddef9d)\r\n\r\nWith the patch\r\n![image](https://github.com/user-attachments/assets/dbb85ebf-3977-44e3-a9ce-bd9b62814519)\r\n\r\n\r\n<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\">\r\n\r\n<head>\r\n\r\n<meta name=ProgId content=Excel.Sheet>\r\n<meta name=Generator content=\"Microsoft Excel 15\">\r\n<link id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/jiebinsu/AppData/Local/Temp/msohtmlclip1/01/clip.htm\">\r\n<link rel=File-List\r\nhref=\"file:///C:/Users/jiebinsu/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\">\r\n<style>\r\n<!--table\r\n\t{mso-displayed-decimal-separator:\"\\.\";\r\n\tmso-displayed-thousand-separator:\"\\,\";}\r\n@page\r\n\t{margin:.75in .7in .75in .7in;\r\n\tmso-header-margin:.3in;\r\n\tmso-footer-margin:.3in;}\r\ntr\r\n\t{mso-height-source:auto;}\r\ncol\r\n\t{mso-width-source:auto;}\r\nbr\r\n\t{mso-data-placement:same-cell;}\r\ntd\r\n\t{padding-top:1px;\r\n\tpadding-right:1px;\r\n\tpadding-left:1px;\r\n\tmso-ignore:padding;\r\n\tcolor:black;\r\n\tfont-size:11.0pt;\r\n\tfont-weight:400;\r\n\tfont-style:normal;\r\n\ttext-decoration:none;\r\n\tfont-family:Calibri, sans-serif;\r\n\tmso-font-charset:0;\r\n\tmso-number-format:General;\r\n\ttext-align:general;\r\n\tvertical-align:bottom;\r\n\tborder:none;\r\n\tmso-background-source:auto;\r\n\tmso-pattern:auto;\r\n\tmso-protection:locked visible;\r\n\twhite-space:nowrap;\r\n\tmso-rotate:0;}\r\n.xl65\r\n\t{border:.5pt solid windowtext;}\r\n.xl66\r\n\t{mso-number-format:\"0\\.0%\";\r\n\tborder:.5pt solid windowtext;}\r\n-->\r\n</style>\r\n</head>\r\n\r\n<body link=\"#0563C1\" vlink=\"#954F72\">\r\n\r\n\r\nQuery | QPS gain\r\n-- | --\r\n0 | 102.5%\r\n1 | 98.9%\r\n2 | 98.2%\r\n3 | 98.0%\r\n4 | 99.1%\r\n5 | 99.9%\r\n6 | 94.5%\r\n7 | 100.9%\r\n8 | 111.2%\r\n9 | 111.0%\r\n10 | 111.9%\r\n11 | 111.4%\r\n12 | 106.5%\r\n13 | 106.2%\r\n14 | 106.7%\r\n15 | 100.4%\r\n16 | 101.0%\r\n17 | 99.8%\r\n18 | 104.2%\r\n19 | 100.5%\r\n20 | 112.6%\r\n21 | 107.2%\r\n22 | 106.3%\r\n23 | 112.0%\r\n24 | 113.9%\r\n25 | 113.8%\r\n26 | 113.6%\r\n27 | 108.3%\r\n28 | 105.5%\r\n29 | 98.6%\r\n30 | 107.6%\r\n31 | 110.0%\r\n32 | 101.8%\r\n33 | 106.1%\r\n34 | 107.5%\r\n35 | 101.6%\r\n36 | 100.4%\r\n37 | 99.6%\r\n38 | 100.7%\r\n39 | 99.8%\r\n40 | 100.0%\r\n41 | 101.0%\r\n42 | 100.5%\r\nGeomean | 104.3%\r\n\r\n\r\n\r\n</body>\r\n\r\n</html>\r\n\r\n\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nTune the value of `min_marks_for_concurrent_read` to get better performance.\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n#### CI Settings (Only check the boxes if you know what you are doing):\r\n- [ ] <!---ci_set_required--> Allow: All Required Checks\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_set_builds--> Allow: All Builds\r\n- [ ] <!---batch_0_1--> Allow: batch 1, 2 for multi-batch jobs\r\n- [ ] <!---batch_2_3--> Allow: batch 3, 4, 5, 6 for multi-batch jobs\r\n---\r\n- [ ] <!---ci_exclude_style--> Exclude: Style check\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan|msan|ubsan|coverage--> Exclude: All with TSAN, MSAN, UBSAN, Coverage\r\n- [ ] <!---ci_exclude_aarch64|release|debug--> Exclude: All with aarch64, release, debug\r\n---\r\n- [ ] <!---ci_include_fuzzer--> Run only fuzzers related jobs (libFuzzer fuzzers, AST fuzzers, etc.)\r\n- [ ] <!---ci_exclude_ast--> Exclude: AST fuzzers\r\n---\r\n- [ ] <!---do_not_test--> Do not test\r\n- [ ] <!---woolen_wolfdog--> Woolen Wolfdog\r\n- [ ] <!---upload_all--> Upload binaries for special builds\r\n- [ ] <!---no_merge_commit--> Disable merge-commit\r\n- [ ] <!---no_ci_cache--> Disable CI cache\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/69547.diff",
    "commits": 6,
    "additions": 12,
    "deletions": 10
  },
  "68441": {
    "title": "Add thread pool and cancellation to support parallel merge with key",
    "body": "The previous performance patch (https://github.com/ClickHouse/ClickHouse/pull/50748 https://github.com/ClickHouse/ClickHouse/pull/52973) has a good performance improvement on the `merge without key` to make it more parallel. I have found that `merge with key` is in serial currently and merge all the singleLevelHash together. As for the `merge with key` scenario, we can also apply it with a multi-thread implementation.\r\n\r\nThis patch will add thread pool and cancellation if merge data with key. During the merge, if the data size is large, we may convert the singleLevelHash to twoLevelHash and merge in parallel.\r\n\r\nTest the patch with 2 x 80 vCPUs, Q8 and Q9 of clickbench have got **10.3%** and **7.6%** performance improvement. There is no regression for the other queries.\r\n\r\nWith the patch, from the pipeline figures of Q8 (SELECT RegionID, COUNT(DISTINCT UserID) AS u FROM hits GROUP BY RegionID ORDER BY u DESC LIMIT 10), we can find that the serial part of merge is in parallel (the orange part) while the size of hashtable is large. If the size of hashtable is small, we will keep it as singlelevel and merge in serial. We have tuned the threshold to make sure there is no regression.\r\n\r\n![image](https://github.com/user-attachments/assets/c126b8f0-8b62-4be0-8362-3c93018f1d1b)\r\n\r\n\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nAdd the parallel merge with key implementation to maximize the CPU utilization.\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n#### CI Settings (Only check the boxes if you know what you are doing):\r\n- [ ] <!---ci_set_required--> Allow: All Required Checks\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_set_builds--> Allow: All Builds\r\n- [ ] <!---batch_0_1--> Allow: batch 1, 2 for multi-batch jobs\r\n- [ ] <!---batch_2_3--> Allow: batch 3, 4, 5, 6 for multi-batch jobs\r\n---\r\n- [ ] <!---ci_exclude_style--> Exclude: Style check\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan|msan|ubsan|coverage--> Exclude: All with TSAN, MSAN, UBSAN, Coverage\r\n- [ ] <!---ci_exclude_aarch64|release|debug--> Exclude: All with aarch64, release, debug\r\n---\r\n- [ ] <!---ci_include_fuzzer--> Run only fuzzers related jobs (libFuzzer fuzzers, AST fuzzers, etc.)\r\n- [ ] <!---ci_exclude_ast--> Exclude: AST fuzzers\r\n---\r\n- [ ] <!---do_not_test--> Do not test\r\n- [ ] <!---woolen_wolfdog--> Woolen Wolfdog\r\n- [ ] <!---upload_all--> Upload binaries for special builds\r\n- [ ] <!---no_merge_commit--> Disable merge-commit\r\n- [ ] <!---no_ci_cache--> Disable CI cache\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/68441.diff",
    "commits": 1,
    "additions": 36,
    "deletions": 15
  },
  "57343": {
    "title": "Add auto-vectorization for BinaryOperation",
    "body": "### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nEnable auto-vectorization for binary operations such as `+` and `*`. On a 2 x 80 vCPUs system with ClickBench, Q29 becomes 5% faster, and the total runtime of 43 queries improved by 1.6%.",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/57343.diff",
    "commits": 1,
    "additions": 38,
    "deletions": 1
  },
  "64426": {
    "title": "Reduce the redundant `isDefault()` of `ColumnSparse::filter` to improve performance",
    "body": "We have found that Q10 of ClickBench has cost more than 30% cycles on the `ColumnSparse::filter`.\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/49742809/6c9808d8-8827-4201-ba60-e6eaa7fd8369)\r\n\r\nBy investigating asm in the hotspot, most of the hotspot in `ColumnSparse::filter` is the method `isDefault()` in the Iterator. But there are twice `isDefault()` in the `for loop` -- `!offset_it.isDefault()` and another in the `++offset_it`.\r\n\r\nThe idea of the patch is to reduce the redundant `isDefault()`. Replace the `++offset_it` with `offset_it.increaseCurrentRow()` and `offset_it.increaseCurrentOffset()`, to remove the redundant `isDefault()` in `++` of `Interator` and reuse the following `isDefault()`.\r\n\r\nTest the patch with Q10 of ClickBench on 80x2 vCPUs and the QPS has got **9.6%** performance gain.\r\nThe total cycles has reduced to **79.2%** and the cycles of `ColumnSparse::filter` has reduced to **46.4%**.\r\nBesides, Q7, Q11, Q20 of ClickBench has got **7.3%, 8.7%, 7.3%** performance improvement and overall geomean has got **2.4%** gain.\r\n\r\n<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\">\r\n\r\n<head>\r\n\r\n<meta name=ProgId content=Excel.Sheet>\r\n<meta name=Generator content=\"Microsoft Excel 15\">\r\n<link id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/jiebinsu/AppData/Local/Temp/msohtmlclip1/01/clip.htm\">\r\n<link rel=File-List\r\nhref=\"file:///C:/Users/jiebinsu/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\">\r\n<style>\r\n<!--table\r\n\t{mso-displayed-decimal-separator:\"\\.\";\r\n\tmso-displayed-thousand-separator:\"\\,\";}\r\n@page\r\n\t{margin:.75in .7in .75in .7in;\r\n\tmso-header-margin:.3in;\r\n\tmso-footer-margin:.3in;}\r\ntr\r\n\t{mso-height-source:auto;}\r\ncol\r\n\t{mso-width-source:auto;}\r\nbr\r\n\t{mso-data-placement:same-cell;}\r\ntd\r\n\t{padding-top:1px;\r\n\tpadding-right:1px;\r\n\tpadding-left:1px;\r\n\tmso-ignore:padding;\r\n\tcolor:black;\r\n\tfont-size:11.0pt;\r\n\tfont-weight:400;\r\n\tfont-style:normal;\r\n\ttext-decoration:none;\r\n\tfont-family:Calibri, sans-serif;\r\n\tmso-font-charset:0;\r\n\tmso-number-format:General;\r\n\ttext-align:general;\r\n\tvertical-align:bottom;\r\n\tborder:none;\r\n\tmso-background-source:auto;\r\n\tmso-pattern:auto;\r\n\tmso-protection:locked visible;\r\n\twhite-space:nowrap;\r\n\tmso-rotate:0;}\r\n.xl65\r\n\t{border:.5pt solid windowtext;}\r\n.xl66\r\n\t{mso-number-format:\"0\\.0%\";\r\n\tborder:.5pt solid windowtext;}\r\n-->\r\n</style>\r\n</head>\r\n\r\n<body link=\"#0563C1\" vlink=\"#954F72\">\r\n\r\n\r\nQPS   (opt/base) | 109.6%\r\n-- | --\r\nCYCLES   (opt/base) | 79.2%\r\nINSTRUCTIONS   (opt/base) | 81.5%\r\n`FILTER`   CYCLES (opt/base) | 46.4%\r\n`FILTER`   INSTRUCTIONS (opt/base) | 66.3%\r\n\r\n\r\n\r\n</body>\r\n\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nReduce redundant calls to `isDefault()` of `ColumnSparse::filter` to improve performance\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n<details>\r\n    <summary>CI Settings</summary>\r\n\r\n**NOTE:** If your merge the PR with modified CI you **MUST KNOW** what you are doing\r\n**NOTE:** Checked options will be applied if set before CI RunConfig/PrepareRunConfig step\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_unit--> Allow: Unit tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_include_aarch64--> Allow: All with aarch64\r\n- [ ] <!---ci_include_asan--> Allow: All with ASAN\r\n- [ ] <!---ci_include_tsan--> Allow: All with TSAN\r\n- [ ] <!---ci_include_analyzer--> Allow: All with Analyzer\r\n- [ ] <!---ci_include_azure --> Allow: All with Azure\r\n- [ ] <!---ci_include_KEYWORD--> Allow: Add your option here\r\n---\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_integration--> Exclude: Integration Tests\r\n- [ ] <!---ci_exclude_stateless--> Exclude: Stateless tests\r\n- [ ] <!---ci_exclude_stateful--> Exclude: Stateful tests\r\n- [ ] <!---ci_exclude_performance--> Exclude: Performance tests\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan--> Exclude: All with TSAN\r\n- [ ] <!---ci_exclude_msan--> Exclude: All with MSAN\r\n- [ ] <!---ci_exclude_ubsan--> Exclude: All with UBSAN\r\n- [ ] <!---ci_exclude_coverage--> Exclude: All with Coverage\r\n- [ ] <!---ci_exclude_aarch64--> Exclude: All with Aarch64\r\n---\r\n- [ ] <!---do_not_test--> do not test (only style check)\r\n- [ ] <!---no_merge_commit--> disable merge-commit (no merge from master before tests)\r\n- [ ] <!---no_ci_cache--> disable CI cache (job reuse)\r\n- [ ] <!---batch_0--> allow: batch 1 for multi-batch jobs\r\n- [ ] <!---batch_1--> allow: batch 2\r\n- [ ] <!---batch_2--> allow: batch 3\r\n- [ ] <!---batch_3_4_5--> allow: batch 4, 5 and 6\r\n</details>\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/64426.diff",
    "commits": 2,
    "additions": 48,
    "deletions": 1
  },
  "50748": {
    "title": "Convert hashSets in parallel before merge",
    "body": "Before merge, if one of the lhs and rhs is singleLevelSet and the other is twoLevelSet, then the SingleLevelSet will call convertToTwoLevel(). The convert process is serial and not in parallel. It will cost lots of cycle before it cosumes all the singleLevelSet.\r\n\r\nThe idea of the patch is to convert all the singleLevelSets to twoLevelSets in parallel before merge.\r\n\r\nI have tested the patch on Intel 2 x 112 vCPUs SPR server with clickbench and latest upstream ClickHouse. Q5 has got a big **264%** performance improvement and 24 queries have got at least 5% performance gain. The overall geomean of 43 queries has gained **7.4%** more than the base code.\r\n\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nThis patch will provide a method to deal with all the hashsets in parallel before merge. \r\n\r\n### The detail to define the performance issue and how to resolve it.\r\nFirst, we have found that there is a performance drop for the Q5 of clickbench as the core count increases.\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/49742809/d9d76d2b-b585-490d-a150-0a96dc473d81)\r\nThen we have collected a pipeline visualization if the max_threads of thread_pool is 80 or 112.\r\nmax_threads = 80\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/49742809/6ac5e45c-c98b-48a4-b820-de4097bb71d6)\r\nmax_threads = 112\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/49742809/b7155669-fd39-457e-8c7d-e35e0d32b4be)\r\nIf the max_threads increase from 80 to 112, the merge stage does not decrease, but merge time is 3.2x more.\r\nwhen merging two twoLevelHash, there is already an optimization to start thread_pool and merge in parallel. However, when merge one singleLevelHash and one TwoLevelHash, the singleLevelHash has to convert to twoLevelHash. The convert progress is serial.\r\nIf there is at least one singleLevelHash and one TwoLevelHash, all the singleLevelHash have to be converted to twoLevelHash before merged with the other twoLevelHash. We could add a new stage before merge called Prepare_Hash_before_Merge, where all the hashset would be processed before merging. All the singleLevelHash would be converted to twoLevelHash in parallel in this stage instead of in serial in merge stage.\r\nwith this patch, Q5 has got 2.64x performance improvement on a 2x112 vCPUs system (max_threads = 112).\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/49742809/789f7430-e45d-45a0-8fb5-b0a9c97a25ee)\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/50748.diff",
    "commits": 11,
    "additions": 116,
    "deletions": 0
  },
  "52973": {
    "title": "Optimize the merge if all hashSets are singleLevel in UniqExactSet",
    "body": "In PR(https://github.com/ClickHouse/ClickHouse/pull/50748), it has added new phase `parallelizeMergePrepare` before merge if all the hashSets are not all singleLevel or not all twoLevel. Then it will convert all the singleLevelSet to twoLevelSet in parallel, which will increase the CPU utilization and QPS.\r\n\r\nBut if all the hashtables are singleLevel, it could also benefit from the `parallelizeMergePrepare` optimization in most cases if the hashtable size are not too small. \r\n\r\nThen we should tune the threshold of the hashtable size. The total dataSet should not be that large. The unique column count should be proportional to the number of hits_v1. Keep the unique column count very small or we will never find the cross point in limited threads. And we would choose the dataSet `hits_v1` and the column `SearchPhase`. We have to make sure all the hashtable are singleLevel no matter what is the threads_num. Also, we have to make sure there is a cross point in the figure.\r\n\r\nBy tuning the Query `SELECT COUNT(DISTINCT SearchPhase) FROM hits_v1` in different threads, we have got the mild threshold 6,000 (total_hashtable_size/hashtable_num). `COUNT(DISTINCT SearchPhase)` is only 132,256. Even when threads_num is very small, the hashtable size could not reach the threshold 100,000 and they are all singleLevel.\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/49742809/5a91dad5-9fa8-4c02-81cf-8ef98a92cdb7)\r\n\r\nTest patch with the Query 'SELECT COUNT(DISTINCT Title) FROM hits_v1' on 2x80 vCPUs server. If the threads are less than 48, the hashSets are all twoLevel or mixed by singleLevel and twoLevel. If the threads are over 56, all the hashSets are singleLevel. And the QPS has got at most **2.35x** performance gain.\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/49742809/45c7265a-b578-4c51-92f0-3c7a2ae8fd56)\r\n\r\n    Threads Opt/Base\r\n    8       100.0%\r\n    16      99.4%\r\n    24      110.3%\r\n    32      99.9%\r\n    40      99.3%\r\n    48      99.8%\r\n    56      183.0%\r\n    64      234.7%\r\n    72      233.1%\r\n    80      229.9%\r\n    88      224.5%\r\n    96      229.6%\r\n    104     235.1%\r\n    112     229.5%\r\n    120     229.1%\r\n    128     217.8%\r\n    136     222.9%\r\n    144     217.8%\r\n    152     204.3%\r\n    160     203.2%\r\n\r\n\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nOptimize the merge if all hashSets are singleLevel in UniqExactSet.\r\n",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/52973.diff",
    "commits": 9,
    "additions": 14,
    "deletions": 1
  },
  "46289": {
    "title": "Optimize the SIMD StringSearcher by searching first two chars",
    "body": "This patch offers the optimized SIMD StringSearcher by searching the first and second chars together rather than only the first char, which will result in big performance gain. The patch also provides a quick path when the needle size is 1.\r\n\r\nWith this patch, I have tested the 43 queries in clickbench on ICX server. Query 20 has got 35% performance gain. Other StringSearcher related queries have got around 10% performance improvement. And the overall geomean of all the queries has got 4.1% performance gain.\r\n\r\n### Changelog category (leave one):\r\n- Performance Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\n- Optimize the generic SIMD StringSearcher by searching first two chars.",
    "diff_url": "https://github.com/ClickHouse/ClickHouse/pull/46289.diff",
    "commits": 5,
    "additions": 86,
    "deletions": 29
  }
}